unit MonolitoFinanceiro.Model.Usuarios;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Datasnap.Provider,
  Datasnap.DBClient, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TdmUsuarios = class(TDataModule)
    sqlUsuarios: TFDQuery;
    dataSetUsuarios: TClientDataSet;
    dataSetProviderUsuarios: TDataSetProvider;
    dataSetUsuariosid: TStringField;
    dataSetUsuariosnome: TStringField;
    dataSetUsuarioslogin: TStringField;
    dataSetUsuariossenha: TStringField;
    dataSetUsuariosdata_cadastro: TDateField;
    dataSetUsuariosstatus: TWideStringField;
  private
    FNomeUsuarioLogado: String;
    FLoginUsuarioLogado: String;
    FIDUsuarioLogado: String;
    procedure SetNomeUsuarioLogado(const Value: String);
    procedure SetLoginUsuarioLogado(const Value: String);
    procedure SetIDUsuarioLogado(const Value: String);
    { Private declarations }
  public
    { Public declarations }
    function TemLoginCadastrado(Login : String; ID : String) : Boolean;
    procedure EfetuarLogin(Login : String; Senha : String);

    property NomeUsuarioLogado  : String read FNomeUsuarioLogado write SetNomeUsuarioLogado;
    property LoginUsuarioLogado : String read FLoginUsuarioLogado write SetLoginUsuarioLogado;
    property IDUsuarioLogado    : String read FIDUsuarioLogado write SetIDUsuarioLogado;
  end;

var
  dmUsuarios: TdmUsuarios;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses MonolitoFinanceiro.Model.Conexao;

{$R *.dfm}

{ TdmUsuarios }

procedure TdmUsuarios.EfetuarLogin(Login, Senha: String);
var
  SQLConsulta : TFDQuery;
begin
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := dmConexao.SQLConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('SELECT * FROM usuarios WHERE login = :login AND senha = :senha');
    SQLConsulta.ParamByName('login').AsString := Login;
    SQLConsulta.ParamByName('senha').AsString := Senha;
    SQLConsulta.Open();

    if SQLConsulta.IsEmpty then
    begin
      raise Exception.Create('Usuário ou Senha INVÀLIDOS!');
    end;

    if SQLConsulta.FieldByName('status').AsString <> 'A' then
    begin
      raise Exception.Create('Usuário BLOQUEADO! - Entrar em contato com o Administrador');
    end;

    FIDUsuarioLogado    := SQLConsulta.FieldByName('id').AsString;
    FNomeUsuarioLogado  := SQLConsulta.FieldByName('nome').AsString;
    FLoginUsuarioLogado := SQLConsulta.FieldByName('login').AsString;

  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

procedure TdmUsuarios.SetIDUsuarioLogado(const Value: String);
begin
  FIDUsuarioLogado := Value;
end;

procedure TdmUsuarios.SetLoginUsuarioLogado(const Value: String);
begin
  FLoginUsuarioLogado := Value;
end;

procedure TdmUsuarios.SetNomeUsuarioLogado(const Value: String);
begin
  FNomeUsuarioLogado := Value;
end;

function TdmUsuarios.TemLoginCadastrado(Login, ID: String): Boolean;
var
  SQLConsulta : TFDQuery;
begin
  Result := False;
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := dmConexao.SQLConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('SELECT id FROM usuarios WHERE login = :login');
    SQLConsulta.ParamByName('login').AsString := Login;
    SQLConsulta.Open();

    if not SQLConsulta.IsEmpty then
      Result := SQLConsulta.FieldByName('id').AsString <> ID;

  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

end.
